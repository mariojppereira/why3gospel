(**************************************************************************)
(*                                                                        *)
(*  GOSPEL -- A Specification Language for OCaml                          *)
(*                                                                        *)
(*  Copyright (c) 2018- The VOCaL Project                                 *)
(*                                                                        *)
(*  This software is free software, distributed under the MIT license     *)
(*  (as described in file LICENSE enclosed).                              *)
(**************************************************************************)

(** This module mirrors the GOSPEL standard library.
    It is used in the Why3 modules builts by the GOSPEL plug-in for Why3. *)

module Gospel

  use export int.Int
  use export ocaml.Exceptions

  type integer = int

  use int.ComputerDivision    (* FIXME? Euclidean division instead *)
  function (/) (x y: int) : int = div x y

  (* TODO: many things are missing.
     See file ../gospel/stdlib/gospelstdlib.mli *)

  scope Order

    use int.Int
    use mach.int.Int63

    predicate is_pre_order (cmp: 'a -> 'a -> int63) =
      (forall x. cmp x x = 0) /\
      (forall x y. cmp x y = 0 <-> cmp y x = 0) /\
      (forall x y. cmp x y < 0 <-> cmp y x > 0) /\
      (forall x y z.
        (cmp x y = 0 -> cmp y z = 0 -> cmp x z = 0) /\
        (cmp x y = 0 -> cmp y z < 0 -> cmp x z < 0) /\
        (cmp x y < 0 -> cmp y z = 0 -> cmp x z < 0) /\
        (cmp x y < 0 -> cmp y z < 0 -> cmp x z < 0))

  end

  scope Comparable

    use int.Int
    import Order
    use mach.int.Int63

    type t

    val function compare t t : int63

    axiom is_pre_order: is_pre_order compare

    predicate le (x y: t) = compare x y <= 0

  end

end
