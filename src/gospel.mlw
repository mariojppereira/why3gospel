(**************************************************************************)
(*                                                                        *)
(*  GOSPEL -- A Specification Language for OCaml                          *)
(*                                                                        *)
(*  Copyright (c) 2018- The VOCaL Project                                 *)
(*                                                                        *)
(*  This software is free software, distributed under the MIT license     *)
(*  (as described in file LICENSE enclosed).                              *)
(**************************************************************************)

(** This module mirrors the Gospel standard library.
    It is used in the Why3 modules built by the Gospel plug-in for Why3. *)

module Stdlib

  use export int.Int
  use export int.MinMax
  use export option.Option
  use export ocaml.Exceptions
  use export ocaml.Sys
  use export ocaml.Pervasives
  use export list.List

  type integer = int

  scope Seq
    use export seq.Seq
    function init (i: int) (f: int -> 'a) : seq 'a = create i f

    use export seq.OfList
  end
  type seq 'a = Seq.seq 'a

  function (++) (s t: seq 'a) : seq 'a = Seq.(++) s t
  function ([]) (s: seq 'a) (i:integer): 'a = Seq.([]) s i
  function ([..]) (s: seq 'a) (i1 i2: int): seq 'a = Seq.([..]) s i1 i2
  function ([.._]) (s: seq 'a) (i: int): seq 'a = Seq.([.._]) s i
  function ([_..]) (s: seq 'a) (i: int): seq 'a = Seq.([_..]) s i

  scope Bag
    use export bag.Bag
  end
  type bag 'a = Bag.bag 'a

  use export ref.Ref

  scope Array
    use export mach.array.Array63
    function get (a : array 'a) (i: int) : 'a = a[i]

    use mach.array.Array63Permut as P

    predicate permut (a1 a2: array 'a) = P.permut_all a1 a2
    predicate permut_sub (a1 a2: array 'a) (l u: int) = P.permut_sub a1 a2 l u
  end
  type array 'a = Array.array 'a

  scope Set
    use import set.Fset as FS

    predicate mem (x: 'a) (s: fset 'a) = FS.mem x s

    constant empty: fset 'a = FS.empty

    function singleton (x: 'a) : fset 'a = FS.singleton x

    function union (s1 s2: fset 'a) : fset 'a = FS.union s1 s2

    use import set.FsetSum as FSum

    function sum (f: 'a -> integer) (x: fset 'a) : integer = FSum.sum x f
  end
  type set 'a = Set.FS.fset 'a

  use int.ComputerDivision
  function (/) (x y: int) : int = div x y

  use int.Power as P
  function pow (x y: int) : int = P.power x y

  use mach.int.Int63 as I
  type int63 = I.int63
  function integer_of_int (x: int63) : int = I.to_int x

  let constant max_int : int = I.max_int63
  let constant min_int : int = I.min_int63
  
  function fst (x : ('a, 'b)) : 'a = let (f, _) = x in f
  function snd (x : ('a, 'b)) : 'b = let (_, s) = x in s

  scope Order
    predicate is_pre_order (cmp: 'a -> 'a -> int63) =
      (forall x. cmp x x = 0) /\
      (forall x y. cmp x y = 0 <-> cmp y x = 0) /\
      (forall x y. cmp x y < 0 <-> cmp y x > 0) /\
      (forall x y z.
        (cmp x y = 0 -> cmp y z = 0 -> cmp x z = 0) /\
        (cmp x y = 0 -> cmp y z < 0 -> cmp x z < 0) /\
        (cmp x y < 0 -> cmp y z = 0 -> cmp x z < 0) /\
        (cmp x y < 0 -> cmp y z < 0 -> cmp x z < 0))
  end

  scope Map
    use export map.Map
  end
end

module Comparable

  use int.Int
  use mach.int.Int63
  use Stdlib

  type t

  function cmp: t -> t -> int63
  axiom is_pre_order: Order.is_pre_order cmp

  val compare (x y: t) : int63
    ensures { result = cmp x y }

  predicate le (x y: t) = cmp x y <= 0

end

(* module Seq *)

(*   use export seq.Seq *)
(*   use export seq.FoldLeft *)
(*   use export seq.FoldRight *)

(*   use int.Int, mach.int.Int63 *)
(*   predicate le (x y: int63) = *)
(*     x <= y *)
(*   clone export seq.Sorted with type t = int63, predicate le, goal . *)

(* end *)